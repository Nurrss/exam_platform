generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int             @id @default(autoincrement())
  email        String          @unique
  password     String
  firstName    String
  lastName     String?
  role         Role
  isVerified   Boolean         @default(false)
  verificationToken String?    @unique
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  refreshTokens RefreshToken[] 
  exams        Exam[]          @relation("TeacherExams")
  sessions     ExamSession[]   @relation("StudentSessions")
  passwordResetTokens PasswordResetToken[]
}

model Exam {
  id           Int          @id @default(autoincrement())
  title        String
  description  String?
  examCode     String       @unique 
  createdAt    DateTime     @default(now())
  status       ExamStatus   @default(DRAFT)
  teacherId    Int
  teacher      User         @relation("TeacherExams", fields: [teacherId], references: [id])
  questions    Question[]
  sessions     ExamSession[]
}

model Question {
  id        Int            @id @default(autoincrement())
  examId    Int
  exam      Exam           @relation(fields: [examId], references: [id])
  text      String
  type      QuestionType
  options   Json?
  correct   Json?
  answers   Answer[]
}

model ExamSession {
  id           Int           @id @default(autoincrement())
  examId       Int
  exam         Exam          @relation(fields: [examId], references: [id])
  studentId    Int
  student      User          @relation("StudentSessions", fields: [studentId], references: [id])
  startedAt    DateTime?
  finishedAt   DateTime?
  status       SessionStatus @default(PENDING)
  score        Float?
  answers      Answer[]

  locked       Boolean       @default(false)
  lockedUntil  DateTime?
  lastViolation Json?

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Answer {
  id         Int          @id @default(autoincrement())
  questionId Int
  sessionId  Int
  response   Json
  createdAt  DateTime      @default(now())
  isCorrect  Boolean?

  question   Question      @relation(fields: [questionId], references: [id])
  session    ExamSession   @relation(fields: [sessionId], references: [id])

  @@unique([sessionId, questionId])
}

model RefreshToken {
  id         Int        @id @default(autoincrement())
  userId     Int
  token      String
  device     String?
  expiresAt  DateTime
  createdAt  DateTime   @default(now())

  user       User       @relation(fields: [userId], references: [id])

  @@index([userId])
}

model PasswordResetToken {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  expiresAt  DateTime
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

enum ExamStatus {
  DRAFT
  PUBLISHED
  CLOSED
}

enum QuestionType {
  MULTIPLE_CHOICE
  TEXT
  TRUE_FALSE
}

enum SessionStatus {
  PENDING
  ACTIVE
  BLOCKED_WAITING
  LOCKED
  COMPLETED
  COMPLETED_BY_TEACHER
}
